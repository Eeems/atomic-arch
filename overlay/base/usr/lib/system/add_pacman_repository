#!/usr/bin/python
import argparse
import requests
import os
import shlex
import stat

from urllib.parse import urlparse
from typing import cast

from _os.system import execute  # pyright:ignore [ reportImplicitRelativeImport]
from _os.system import chronic  # pyright:ignore [ reportImplicitRelativeImport]


def is_url(url: str):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])

    except ValueError:
        return False


parser = argparse.ArgumentParser()
_ = parser.add_argument("name", help="Name of repository")
_ = parser.add_argument(
    "--key",
    help="Path or url to key file to import",
    default=None,
)
_ = parser.add_argument(
    "--keyfile",
    help="Key to import that is used for signing packages in the repository",
    default=None,
)
_ = parser.add_argument(
    "--keyserver", help="Keyserver to get key from", default="keyserver.ubuntu.com"
)
_ = parser.add_argument(
    "--server",
    help="Server entry for the repository",
    metavar="SERVER",
    action="append",
    dest="servers",
)
args = parser.parse_args()
os.makedirs("/usr/lib/system/initialize_pacman.d", exist_ok=True)
execute("/usr/lib/system/initialize_pacman")
name = cast(str, args.name)
script = f"/usr/lib/system/initialize_pacman.d/{name}"
with open(script, "w") as f:
    _ = f.write("#!/bin/sh\n")

    def runAndAppend(*cmd: str):
        chronic(*cmd)
        _ = f.write(f"{shlex.join(cmd)}\n")

    key = cast(str | None, args.key)
    if key is not None:
        msg = f"[system] Adding key for {name}"
        print(msg)
        _ = f.write(f"{shlex.join(['echo', msg])}\n")
        keyfile = cast(str | None, args.keyfile)
        if keyfile is None:
            runAndAppend(
                "pacman-key",
                "--recv",
                key,
                "--keyserver",
                cast(str, args.keyserver),
            )

        elif is_url(keyfile):
            res = requests.get(keyfile)
            res.raise_for_status()
            keyfileDest = os.path.join(
                "/usr/lib/system/initialize_pacman.d", f"{name}.gpg"
            )
            with open(keyfileDest, "wb") as t:
                _ = t.write(res.content)

            runAndAppend("pacman-key", "--add", keyfileDest)

        elif os.path.isfile(keyfile):
            runAndAppend("pacman-key", "--add", keyfile)

        else:
            raise FileNotFoundError(keyfile)

        runAndAppend("pacman-key", "--lsign", key)

os.chmod(script, os.stat(script).st_mode | stat.S_IEXEC)
print(f"[system] Adding repository {name}")
with open("/etc/pacman.conf", "a") as f:
    _ = f.write("\n".join([f"[{name}]", f"Include = /etc/pacman.d/{name}.mirrorlist"]))
    _ = f.write("\n")

print(f"[system] Adding mirrors for {name}")
with open(f"/etc/pacman.d/{name}.mirrorlist", "w") as f:
    _ = f.write("\n".join([f"Server = {x}" for x in cast(list[str], args.servers)]))
    _ = f.write("\n")

print("[system] Updating database")
chronic("pacman", "-Sy")
