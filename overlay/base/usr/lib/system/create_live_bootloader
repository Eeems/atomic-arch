#!/bin/bash
set -e
UUID="${1:-$(date +"%Y-%m-%d-%H-%M-%S-00")}"
echo "[system] Creating live bootloader"

cat >/etc/system/grub.cfg <<EOF
search --file --set=root /${UUID}.uuid
set prefix=(\$root)'/grub'
configfile \$prefix/grub.cfg
EOF

touch "/etc/system/archiso/${UUID}.uuid"
truncate -s 32MB /etc/system/efiboot.img
chronic mkfs.vfat /etc/system/efiboot.img
chronic mmd -i /etc/system/efiboot.img EFI EFI/boot

modules=(
  all_video at_keyboard boot btrfs cat chain configfile echo efifwsetup
  efinet exfat ext2 f2fs fat font gfxmenu gfxterm gzio halt hfsplus iso9660
  jpeg keylayouts linux loadenv loopback lsefi lsefimmap minicmd normal ntfs
  ntfscomp part_apple part_gpt part_msdos png read reboot regexp search
  search_fs_file search_fs_uuid search_label serial sleep tpm udf usb
  usbserial_common usbserial_ftdi usbserial_pl2303 usbserial_usbdebug video
  xfs zstd
)

chronic grub-mkstandalone \
  --format=x86_64-efi \
  --themes="" \
  --sbat=/usr/share/grub/sbat.csv \
  --disable-shim-lock \
  --output=BOOTx64.EFI \
  --modules="${modules[*]}" \
  boot/grub/grub.cfg=/etc/system/grub.cfg

chronic mcopy -i /etc/system/efiboot.img BOOTx64.EFI ::EFI/boot
rm BOOTx64.EFI
chronic grub-mkimage \
  --output=core.img \
  --format=i386-pc \
  --prefix=/boot/grub \
  --config=/etc/system/grub.cfg \
  all_video \
  at_keyboard \
  boot \
  btrfs \
  biosdisk \
  iso9660 \
  multiboot \
  configfile \
  echo \
  halt \
  reboot \
  exfat \
  ext2 \
  linux \
  ntfs \
  usb \
  sleep \
  xfs \
  zstd \
  search

mkdir -p /etc/system/archiso/{boot/grub,atomic/x86_64}

cat /usr/lib/grub/i386-pc/cdboot.img core.img >/etc/system/archiso/boot/grub/eltorito.img

rm core.img

cp -a /usr/lib/modules/*/vmlinuz /etc/system/archiso/atomic/x86_64
cp -a /usr/lib/modules/*/initramfs.img /etc/system/archiso/atomic/x86_64
cp -a /usr/share/edk2-shell/x64/Shell.efi /etc/system/archiso/shellx64.efi
cp -ar /boot/memtest86+ /etc/system/archiso
